// Installing all the components for the circuit.
#include <LCD-I2C.h>
#include <Wire.h>
#include <DHT11.h> 
 
// Defining pins and variables.
DHT11 dht11(2); 
const int backlightDuration = 30000;
LCD_I2C lcd(0x27, 16, 2);
const int relayPin = 6;              
const int buttonPin = 3;               
int buttonState = 0;
bool relayActivated = false;           
volatile bool backlightTriggered = false;
unsigned long backlightStartTime = 0;

// ISR function to handle the button press
void backlightOnISR() {
// A basic debounce, checking if enough time has passed since the last trigger
  if (millis() - backlightStartTime > 50) { // 50 ms debounce delay
    backlightTriggered = true;
    backlightStartTime = millis(); // Record the current time
  }
}

void setup() {
// Initial Component states for when the circuit is powered.
    Wire.begin();
    lcd.begin(&Wire);
    lcd.display();
    lcd.backlightOff();
// Initialising the relay for power output, allowing it to turn on and off.
    pinMode(relayPin, OUTPUT);          
    digitalWrite(relayPin, LOW);       
// Classifying the button as an input pin.
    pinMode(buttonPin, INPUT_PULLUP); 
// An attachInterrupt function that uses the button to activate the backlight when pressed, using the ISR function.
    attachInterrupt(
digitalPinToInterrupt(buttonPin), backlightOnISR, FALLING);
    Serial.begin(9600);
}

void loop() {
//  Setting the initial values to 0 for the DHT11 component, as to provide more accurate readings.
    int temperature = 0;
    int humidity = 0;

    int result = dht11.readTemperatureHumidity(temperature, humidity);

// Printing onto the serial monitor.
    if (result == 0) {
        Serial.print("Temperature: ");
        Serial.print(temperature);
        Serial.print(" Â°C\tHumidity: ");
        Serial.print(humidity);
        Serial.println(" %");
    } else {
// If something goes wrong with the reading, an error message will print onto the serial monitor.
        Serial.println(DHT11::getErrorString(result));
    }

// Setting up the location of where the text will be.
    lcd.setCursor(0, 0); 
// The text for the LCD to display, utilising the DHT11 variable results.
    lcd.print("Temp:");
    lcd.print(temperature);
    lcd.print(" C");
    lcd.setCursor(0, 1);
    lcd.print("Humidity:");
    lcd.print(humidity);
    lcd.print("%");
   
// When the temperature OR humidity goes over a certain humidity or temp, it activates the temperature.
	if ((temperature >= 30 || humidity >= 65) || (temperature <= 20 || humidity <= 45)) {
    	if (!relayActivated) {
        	digitalWrite(relayPin, HIGH);
        	relayActivated = true;   	 
    	}
	} else {
// If there is no threshold met, then the relay stays off or switches off.
    	if (relayActivated) {
        	digitalWrite(relayPin, LOW);  
        	relayActivated = false; 	 
    	}
}

//The delay between checks (0.6 seconds)
    delay(600); 

// When the conditions are met for backlightTriggered, it will turn on the backlight.
    if (backlightTriggered) {
    lcd.backlight(); 
// using the value from the start (30000ms), when the time from when the backlight started exceeds the value of the set duration, the backlight will turn off, and the backlightTriggered variable will be set back to false.
    if (millis() - backlightStartTime >= backlightDuration) {
      lcd.backlightOff();           
      backlightTriggered = false;       
    }
  }
}
